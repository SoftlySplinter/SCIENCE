# SEM2220 - Mobile Solutions

Mobile devices (phones, tablets and other handheld devices) are the fastest growing area of computing. Typical applications involve a wide range of software and system issues. This module will investigate those issues, giving students experience and understanding of the best ways of building different types of mobile applications.


## Introduction

*Scope of mobile systems, , mobile web, native apps, design choices, main platforms, overview of implications (2 lectures)*

### Staff

- **[Chris Loftus](mailto:cwl@aber.ac.uk) (E38)**
- [Neil Taylor](mailto:nst@aber.ac.uk) (C58)
- [Andrew Star](mailto:aos@aber.ac.uk) (C47)

### Learning Outcomes

1. Demonstrate an advanced understanding of the domain of mobile systems.
  * Quite a broad overview of these systems.
  * High level view.
  * Give a flavour of specific systems (iOS, Android).
2. Analyse and evaluate mobile solutions in a range of application areas and be able to critically evaluate their effectiveness.
  * Have to be critical at M level.
  * Research. Pros and cons.
3. Evaluate the social, legal, ethical and professional issues involved in implementing mobile applications.
  * Neil will be talking about this in the context of mobile.
4. Implement representative mobile systems.
  * Playing with the technologies.
  * Building an android, iOS and mobile web app.

### Assessment

- Mobile Web-based Programming project **20%** *22/10/2013 to 04/11/2013*
- iOS-based Programming project **20%** *12/11/2013 to 25/11/2013*
- Android-based Programming project **20%** *02/12/2013 to 16/12/2013*
- Case study analysis **40%** *10/12/2013 to 22/01/2014*

### Motivation

In 2012 the whole mobiles ecosystem's revenue was $1,551 billion; equivalent to 2.2% of global GDP. 

5% CAGR (Compound Annual Growth Rate).

These are only projected figures, the picture is much bigger than this as this only includes money which takes into account the money which stays within the ecosystem (doesn't include ecommerce, etc.). The affect is much higher.

### Mobile Landscape

Constantly changing given that its a new market. The iPhone was the real kickstarter for this in 2007.

[Timeline](https://gsmaintelligence.com/timeline/) of the history mobile telephones.

Difference between "smart" and "feature" phones.

Mobile subscribers are growing 4 times faster than the global population. Reducing now (especially in the West) due to market saturation.

More scope for growth in developing countries.

Asia Pacific accounts for approximately half of global subscribers.

Total sim-enabled connections (including machine to machine (M2M) connections). Estimated 7.6% CAGR 2012-2017. Percentage of M2M connections is increasing rapidly.

Multiple devices (tables/phones/etc.) allow growth in sim-enabled connections.

Mobile data traffic is increasing rapidly. Video speculated to be one of the most rapidly increasing traffic.

### Mobile versus Desktop

Over time the sales of desktops (PCs & Laptops) is decreasing while the sale of mobile devices is increasing.

### Some predictions by GSMA

* Asia predicted to add approx. 50% of all connections/subscribers between 2013-17
* Same period Latin America and Africa next 20%
* Subscriber growth in developed nations slowing (e.g. 1% in UK)
* Total data traffic load in 2012 was 0.9 Exabyte/month).
* Predicted to be 11.2 EB/mth.


### Chief Stakeholders

* Network operators
* Content providers
* OS vendors
* Device vendors

### Fragmentation and Differentiation

Issue of fragmentation and differentiation, related to:
* the number of OS variants, 
* the number of device vendors wishing to customise the OS, 
* different browsers,
* Network operators and device vendors do not like commoditisation.
  * Don't want to be treated like commodities which are values on price.

Top 25 ranked apps in 2012 take 15% of all revenue. Only 2% of App Store newcomers get into the top 250 apps.

Free apps are becoming more of a norm, especially with the saturation of android.

### Mobile Network Operators

Revenues are decreasing due to over-the-top services (i.e. using online services over SMS or phone calls).

Operators will push, via their shop sales-assistant commission, those devices they gain the biggest discounts on.

High profile phones promoted, often Android.

Apple disrupts this model due to a locked mindshare.

Psychological hook of "cheap" contract phones. Free now, pay later ideology.

Billing relationship with the customer. Paying for things using your mobile account rather than via a bank account (directly). Small transaction fee for this service to generate revenue.

* 48% of the world's population do not have a bank account.

Something for the future, not quite so prevalent at the moment.

### Rich Communication Service

Threat of over the top (OTT) services such as Skype. Quality of service is currently an issue here, but voice call is growing very slowly (13% in 2008 to 4% 2012).

GSMA responded by developing a Rich Communication Service specification. Only aimed at long term evolution (LTE) networks (4G). Aims to provide this as a universal service. 17 different implementations by MNOs including AT&T, Telefonica, Verizon and Verdafon.

### Device Vendors (OEMs)

Nokia sales falling. Haven't kept up with the trends.

Samsung now the major player. Mainly due to their adoption of Android.

Apple improving with mobiles.

RIM/Blackberry are focusing on development.

Building an Android smartphone involves:

* Choosing an OS.
* OEMs design phone (HW, UX, required changes to the Android OS UX) plus apps to include.
* Marketing.
* Negotiations with MNOs to arrange bulk discounts.
* Production test units sent to MNOs, app developers and Google.
* Phone is shipped to MNOs and independent stores
* MNOs customise with their own apps.
* Sales to public plus marketing.

Can also go down the stock phone route.

Inception to market is approximately around 6 months when based on an existing OS.

Apple is a little easier to to the locked-in syndrome.

### Types of Phone

* Basic Phones
  * Call and SMS support only.
* Feature Phones
  * No touch screen
  * Browser becoming standardised.
* Smart Phones
  * Definition changes year-on-year.
  * Expectations change a lot.
  * More sensors and technology.
* Phablets
  * Large smartphones.
* Tablets
  * Same functionality as smartphones, often without SIM.
* Slates
  * Large tablets.
* Non-phone devices
  * iPod touch
  * eBook readers
  * Google Glass
  * Watches like the Apple Pebble.
  * Rely on bluetooth or similar.

### Operating System Vendors

Android leading market player.

iOS popular.

Symbian (dead now) and Blackberry not doing well.

Windows Phone a late starter.

### Android Fragmentation

There are 24 listed Android device manufacturers but at least 259 different device models currently on sale.

Lots of different screen sizes, resolutions, hardware capability, etc.

There is only one manufacturer for Apple products.

Version 4.1+ *Jelly Bean* most prevalent, but versions 4.0, 3.0 and 2.3 are still a large market share.

Security problems, most malware attacks on Android.

iOS is mostly all the same version. However, companies often prescribe a 2-3 purchase cycle. Corporate world might need to take into account older versions.

Google allow fragmentation to make Android more interesting to OEMs, However this can get in the way of updates.

Webkit configuration varies; browser fragmentation.

Tried to stop fragmentation in version 3, but this lead to new forks. So this has been re-introduced in version 4.

### Fragmentation and Differentiation

Differentiation gives a unique selling point (USP) for vendors. Sticking with the same model.

Fragmentation leads to security issues and makes the OS more complex to handle screen sizes, etc. More testing needed. Therefore increased cost.

### Windows Phone 8

Microsoft and Nokia. A closed environment (or "walled garden").

No fragmentation/differentiation. Very few OEMs interested.

### How to join the OS game?

Buy into it.

Web as OS platform. Firefox OS is trying hard with cheap alternatives. HTML5, JS, CSS3 and APIs to access hardware.

Very fragmented, depending on rendering engine.

### Mobile Webkits are not always the same

Can be configured differently. Must be careful with mobile websites.

Depends on location too (UC Browser more popular than Android in Asia).

### Proxy versus full browsers.

Opera mini, for example.

* HTTP request (encrypted)
* Proxy Server
  * Target HTTP Server resources
  * Renders page
  * Compresses into an image map
* Image map returned to Opera mini (encrypted).

Cheaper and faster over a slow network. Very popular in certain developing countries with low bandwidth.

Cheap in terms in processing too.

JS is handled by the proxy server. Not always perfect and may not be enabled.

### Content Providers

App Stores

* Apple App Store is a walled garden. 70% developer revenue.
* Google Play. 70% developer revenue.
* Amazon Android Appstore.
* Others (apk) security issues with this.

## Objective-C

*A quick primer on Obj-C*

### Basic Syntax and Objects


#### Logging and Strings

```objc
NSLog(@"Message");

NSString *var = @"Some message";
NSLog(@"Message: %@.", var);
```

#### Booleans

```objc
BOOL true = YES;
BOOL false = NO;
```

#### Numbers

```objc
NSNumber *num = @10;

// Conversion to unsigned int
NSUInteger uInt = [num unsignedIntegerValue];
```

#### Arrays

```objc
NSArray *arr = @[...];

// Accessing elements
arr[index];

// Something about NSArrays being immutable objects.
```

#### Dictionaries

```objc
NSDictionary *dict = @{@"key": @"value"};

// Accessing
NSString *val = dict[@"key"];
```

### Objects and Messages

Messages are Objective-C's version of methods, where the Java syntax would be:

```java
ObjectName.methodName()
```

The Objective-C syntax is:

```objc
[objectName messageName]
```

Example:

```objc
NSArray *temp = @[@"Test", @"2"];

NSLog(@"%@", [temp description]);
// Logs information about temp
```

#### Storing the output of Messages

Just need to worry about typing

```objc
NSArray *temp = @[@"Test", @"2"];
NSString *result = [temp description]
NSLog(result);
```

#### Parameters

Messages can have parameters, however they may act differently than expected.

```objc
[object methodName:parameter namedParameter:value]
```

#### Initialisation

```objc
[[Class alloc] init];
```

### Conditionals and Loops

```
if(condition) {
    // ...
} else if(condition) {
    // ...
} else {
    // ...
}
```

```
switch(thing) {
    case value:
        // ...
        break;
}
```

```
for(Class *item in iterable) {
    // ...
}
```

### Blocks

Blocks are like basic methods.

```objc
void (^block)(void) = ^{
    // ...
};
```

Inkoving a block:

```objc
block();
```

### Classes

In a header file:

```objc
@interface Name : NSObject
@property Type *name;
@property NSString *myName;
@end
```

Implementing the interface:

```objc
#import Name.h

@implementation Name
@end
```

Accessing properties

```objc
Name *name = [[Name alloc] init];
name.myName = @"Value";
```

## Mobile Web

*Basic tools, responsive web, matching platform expectations, testing, delivery. (5 lectures plus practicals)*

### Objectives

* To be able to build some simple mobile web sites/applications and view them via desktop browsers, mobile browsers and as mobile applications (hybrid apps).
* To gain an insight into design issues especially multiple screen sizes and browser support.
* To use a common mobile web framework to help build a mobile web application.
* To user PhoneGap™ to turn a webb application into a "native" application which can be deployed.
* To use some common testing technologies for mobile web.

### Overview

* Is mobile web being exploited?
* Three main approaches:
  1. Web site
  2. Hybrid App
  3. Native App
* Challenges for mobile web developers
* Standards are a moving target.
* How can we be informed what support there is?
* Given a complex situation, how can we make testing tractable?

#### Core philosophy 
Progressive enhancement and not graceful degradation.

### Web site/app Approach

#### Pros
* One codebase
* Cross platform
* Familiar technology
* Easy to distribute to both mobile and non-mobile

#### Cons
* Lack app store distributions
* Weak access to device services
* Performance (JS interpretation).
* Not as slick as a native app

### Hybrid Applications

Native wrapper around HTML and CSS and JS.

#### Pros
* One codebase
* Cross platform
* Better accesses to device services
* Can distribute via app stores
* Familiar technologies

#### Cons
* No full access to device services
* Performance
* Not as slick as native apps

### Native Applications

#### Pros
* Highly polished
* Good performance (potentially)
* Good developer support platform
* App store distribution.

#### Cons
* Platform specific
* Multiple codebases

### Progressive Enhancement not Graceful Degradation

Graceful degradation (of a website):

* Focus is on building a great experience for the latest browsers, testing one browser version back.
* Old browsers provide poor, but passable, experience, only show-stopped bugs fixed.

Progressive enhancement (of website):

* Focus on content, not browsers.

### Responsive Web Design (RWD)

* Fluid grids
* Media queries - use `em` over `px`.



### Mobile virtual viewports

Mobiles have a virtual viewport which bypass the media queries.

Use the viewport meta-tag to ask the viewport width to be the same as the actual width.

### Breakpoints

Research suggest lines of text should be between 45-75 characters for comfortable reading. Columns help with this.

### Mobile-first progressive enhancement.

Design site for the mobile device. If media queries are supported and on a bigger screen, add to the existing CSS for mobile to add for the styling rules and changing font sizes.

Simplification of complex designs is harder than making a simple design more complex.

### Server-side Detection of Device Capabilities

Client side RWD alone may not be sufficient.

There are some server-side approaches:

* User-agent sniffing.
* Client-side reconnaissance missions.

Classes of "device".

**RESS** (Responsibe Web Design and Server-side Components).

### The problem

Some services will only run on a mobile device (Phone calls, accelerometer).

Some services are more significant on a mobile device (location awareness, etc.), be careful not to run into the *Hide and Cry* anti-pattern.

Some classes of device are very different (feature versus smart phone).

What we spit out is so different that RWD alone won'y help. Need variants of the website.

Image sizing issues that RWD won't solve.

### User-agent sniffing

Can use HTTP User-Agent request header with a device description repository to work out:

* Device hardware characteristics
* Operating System
* Browser characteristics

### Example: Detecting viewport width

```javascript
var width = (winder.innerWidth > 0) ? Window.innderWidth : screen.width;
document.cookie = "sitewidth="width;
document.location.reload();
```

```php
if(isset($_COOKIE["sitewidth"]) {
  $_SESSION["screenwidth"] = $_COOKIE["sitewidth"];
}
// ...
if($_SESSION["screenwidth"] <= "380") {
  include("includes/mobile-nav.inc.php");
} else {
  include("includes/desktop-nav.inc.php");
}
```

### Herding Devices into Device Classes

**Device Class**: An abstract collection of common characteristics of similar devices and their browsers.

Why? Because we don't want our server-side code to have to deal with every device (this isn't scalable).

### Typical Classes

* Higher Mobile (WebKit-based, >= 320px width)
* Simpler Mobile (minimal JS support, >176px width)
* Tablets
* Desktop
* Unsupported (if no SLL, Cookies, JS, or < 176px width)

Does unsupported break progressive enhancement?

### What to send?

* Stylesheets and Code based on class
* Sometimes single codebase is too small (watch out for duplication of common code).
* RESS can help with codebase maintenance.

### Responsive Web Design and Server Side Components

Combine client-side RWD with templating in the codebase for different classes of device.

## IOS Native Apps

*Objective-C, relevant design patterns, platform design considerations, handling data, using sensors and location (5 lectures plus practicals)*

## Android Native Apps

*Relevant design patterns, platform design considerations, handling data, using sensors and location, handling device variation (5 lectures plus practicals)*

## Bringing it all together

*Legal, social, ethical and professional issues. Selecting platforms and delivery methods, getting the interface right. (3 lectures)*

# SEM5720 - The Internet And How It Really Works

The Internet is a complex, multi-organisation network reaching nearly all parts of the world. The functioning of this network and the applications running upon it depend on a complex set of protocols. This module addresses the fundamental aspects of the most important issues that permit the network and its applications to operate successfully. The module also addresses the current threats to the Internet and topics still emerging from R&D studies around the world.

*Postal service analogies: 3*

## Introduction

*This module discusses the detailed underlying operation of the Internet and its constituent components and is an essential topic in its own right as well as providing a solid foundation for much of the other material covered in the MEng.*

### Staff

- **[Dave Price](mailto:dap@aber.ac.uk)**
- [Nitin Naik](mailto:nkn@aber.ac.uk)
- [Stephen Kingston](mailto:spk@aber.ac.uk)

### Learning Outcomes

1. Participate in planning networks that are cost effective and realistic in terms of products and services currently available.
2. Critically assess proposed networking solutions.
3. Assess the effect of likely technological developments on existing network applications.
4. Make decisions and provide guidance to others in the choice of appropriate communications technologies to deploy, to solve real world requirements.
5. Demonstrate extensive knowledge of the internal operation of the Internet and its protocols.
6. Demonstrate an appreciation of the problems that appear in the management of routing and naming in large networks.
7. Exercise judgment in the choice of appropriate protocols and services to address the real needs of Internet operators and users.
8. investigate, and propose solutions to problems of quality of service.
9. Demonstrate an appreciation of the security issues that surround the Internet and its applications and how these can be mitigated.
10. Explain the need for a new generation of the Internet and describe current progress towards it.

### Assessment

- Assignment **40%** *??/??/2013 to ??/??/????*
- Exam **60%**

### Commitment

20 credits = 200 hours of work.

44 hours of lectures, around 20 hours of practicals.

This leaves about 140 hours of personal study, including extra practical work.

There is an assignment worth 40% of the marks (2000 word report).

Text book study and revision.

2 hour exam.

### Recommended Reading

* TCP/IP Protocol Suite - *Foruzan B., Fegan S.*
* RFC or internet drafts available online from [IEFT](http://www.ietf.org/)
* Other textbooks and journals
* [The Internet Protocol Journal](http://cisco.com/ipj/) by Cisco Systems

## Practicals

*Practical work sessions focusing mainly on the electronics and hardware of network issues.*

### Practical 1

Using the computer connected digital oscilloscopes or *picoscopes*.

## Basic Issues in Data Communication

*A revision of the basic issues in data communication.*

### Protocol Models and Frameworks

In the 1970s there was no master plan, overall structure nor agreements on application protocols.

Proprietary protocols and architectures lead to a large amount of anarchy.

### ISO Committees

In 1977 ISO establishes committees and subcommittees and so on and so forth.

Not just ISO doing this, telecommunications (CCITT) also got involved.

### OSI Reference Model - IS 7498

Provides a basic framework using a "divide and conquer" principle.

Uses layering to reduce complexity, where each layer handles one (group of) problem(s).

1. Keep things simple.
2. Choose boundaries at places that minimise interaction between adjacent layers.
3. Functions of a different nature or purpose in different layers
4. Similar function in same layer.
5. Use all part knowledge and experience.
6. Hide implementation within layers
7. Special hardware/processors
8. Data abstraction levels.
9. Internal changes do not affect other layers
10. Only create interfaces to directly surrounding layers (controversial).

### OSI Reference Model Layers

1. Physical - wires, radio frequency
2. Data Link - direct link from one to another
3. Network - global issues like addressing
4. Transport - methods for ensuring quality of service.
5. Session - availability of resources, "checkpoints", etc.
6. Presentation - Language/character set encoding
7. Application - Not supposed to contain or control whole applications, just the useful parts to applications, e.g. directory service

### Exercise
Discuss the statement: *The existence of a communications framework like the OSI model promotes competition between companies*.

#### For
* Companies spend more time actually building products than on firmware to deal with communications. 
* Standardised method of communication allow products to be linked: more scope for different products.


#### Against
* No competition to improve the network process.
* No differentiation.

## Local Area Networks

*A detailed study of variants of the technologies collectively known as Ethernet.*

### 802.3 CSMA/CD Bus (Ethernet)

Derived from work by:

* Xerox
* Intel
* Digital (DEC)

Publised in Ethernet (DIS Blue Book) V1.0 September 30th 1980.

802.3 Revision D dated December 1982 publish by IEEE.

Revision F published July 1984 and also issued as draft proposal 8802/3 by ISO.

### Operation: Carrier Sense Multiple Access with Collision Detection (CSMA/CD)

*Distributed Control*

* Contend for use
* Acquire access and send a data packet
* No priority

Simple Algorithm:

```
1.
if(network active)
  goto 1
transmit(data)
check for collision
if(collision)
  transmit(JAM)
  delay(a random time)
  goto 1
transmission complete
```

Checking for collision is the difficult part. Can check:

1. I'm transmitting a `1`, is there a `1` on the wire.
2. Do the signals on the wire look like the output of one station and one station only.

Delay must be random to avoid future collisions and not have priority.

### Coaxial cable

Very rigorous specifications. Maximum length of 500m and limits on bend.

These are to stop the electric current being interfered with.

Hard limit on propagation: `c` (speed of light).

Transceiver (MAU) to link devices to co-ax conveniently.

Terminators absorb the signal at the ends of the cable.

Repeaters repeat the signal onto other cables, repeat a perfect version of the signal (if possible).

### Broadcast Networks

If data is inserted into the network, it should reach every member on the network.

Need to know how long it will take for data to get across the network.

Rules tend to be the distance between two extremes in the network is 5 of the co-ax cables and 4 repeaters. 2 of the co-ax cables must be point to point without any devices attached.

Bridges, switches, hubs and routers help build larger networks.

### Co-ac Medium Options 802.3

* Original (10BASE5)
  * 10Mbps
  * Baseband coaxial cable
  * segment length 500m
  * Max 10 taps per segment
  * Max 4 repeaters
* 10BASE2
  * 10Mbps
  * Thinner coaxial cable
  * 185m segments
  * Max 30 taps per segment.

### Slot Time

Worst case:

`B` stars transmitting when `A`s packet has nearly reached `B`.

`B` must corrupt, at least, the last bit of `A`s packet.

Therefore, packet length must be such that time to transmit is greater than twice the **transmission delay** for longest route in the network.

For a 2.5km network, 10MBit/sec, the slot time is 51.2 micro seconds.

Smallest allowed packet needs to be the number of bits it takes to reach from one end of the network to the other, times 2, plus a little extra for luck.

512 bit packets capture the network for 10BASE5.

> *"Your bits are now all over the network"* - Dave Price, 10/10/2013

### Calculatng Slot Time

Slot time `s`.

Path time `p`.

`s > 2p`

* 3 coax (with stations) = 21.65 bits
* 2 links (no stations) = 25.65 bits
* 4 repeater delays = 7.5 bits
* Transceiver delays = 6.0 bits
* Transceiver cable delays = 2.57 bits
* etc.

Total about 499 bits worst case. Specified as 512 bits to give a safety margin.

### Network JAMs

* Repeaters required to propagate JAMs.
* Must make sure all repeaters see JAMs.
* Time delay of 500m coax about 2.165 micoseconds
* 32 bits JAM
...

### MAC Frame Format for 802.3

<table><tr><th>Number of Octets</th><th>Field Usage</th></tr><tr><td>7</td><td>Preamble</td></tr><tr><td>1</td><td>Start of frame delimiter</td></tr><tr><td>6</td><td>Destination Address</td></tr><tr><td>6</td><td>Source Address</td></tr><tr><td>2</td><td>Length in 802.3</td></tr><tr><td>1500</td><td>LLC data and padding</td></tr><tr><td>4</td><td>Frame Check Sequence</td></tr></table>

## Other Network Technologies

*A brief look at fast and wireless network technologies.*

## Standards

*The ISO OSI model.*

### IEEE 802 Standards

![IEEE 802](http://misc.alexanderdbrown.com/ieee802.png "IEEE 802")

Encapsulation at each level.

## Unicast Network Level Protocols

*Unicast Network Level Protocols in use in today's Internet. Including further study of protocols such as IPv4, ICMP, ARP, RARP used in unicast applications and IPv4 and IGMP used in multicast applications.*

### Address Resolution Protocol (ARP)

IPv4 has the problem that we know *our* IP address and the ones which we want to talk to, either router or machines on the link.

Very first header is the Ethernet header, need this because every machine would need to look at the IP header, which is a process which needs to be done in software. Other network protocols exist too.

Ethernet headers can be processed in hardware.

Ethernet headers don't contain much, but the machines can automate the process of deciding to ignore the packet in firmware not by the CPU.

There is a problem of mapping IPv4 address to Ethernet address. There's no direct link between IP addresses and Ethernet addresses so we need more at the data link layer.

### MAC Addresses (IEEE 802)

![MAC Address](http://misc.alexanderdbrown.com/mac.png "MAC Address")

* Gotcha: each Octet of MAC frame transmitted low order first (back-to-front).
* I/G - Individual (`0`), Group (`1`) - Unicast or Multicast
* U/L - Universal (`0`), Local (`1`) 

### ARP Packets

![ARP Packet](http://misc.alexanderdbrown.com/arp.png "ARP Packet")

## Unicast Routing in the Internet

*Example routing problems. Interior and exterior routing protocols. Protocols covered will include RIP, OSPF and BGP.*

## Multicast Routing in the Internet

*Example routing problems. Protocols covered will include PIM-DM, PIM-SM and MSDP. We will also cover the role of the Rendezvous Point, Anycast IP, and issues still under debate in the technical community.*

## Transport Level Protocols

*An in-depth study addressing the behaviour of TCP and UDP. Connection establishment and termination, flow control under various load conditions, timeouts and retransmission, newer features and performance.*

### Demultiplexing

Layered like the OSI model (but pre-dates the OSI model).

Ethernet driver captures the incoming frame, strips the Ethernet header and passes to IP

IP layer strips out the IP header and passes it to the transport layer, etc.

Levels:

* Application
* Transport
* Network
* Link
* Physical

The process of moving things up and down layers is demultiplexing and multiplexing.

### Data Encapsulation

Don't sent arbitrary length methods, to allow the multiplexing of networking.

(In TCP) Data is encapsulated into frames, frames have a frame header, trailer and a datagram.

This datagram contains an IP Header and a segment or protocol data unit (PDU)

The PDU has the (TCP) protocol header and the actual data.

The frame header is used to drop the packet onto the local link. The address used in the frame header is embedded in the hardware in the network card (MAC address), this is why the IP address is not used. This is for efficiency.

Frame headers are: source address, destination address, protocol and checksum.

### IP Headers

Organised in octlets as bytes didn't used to be just 8 bits long.

IPv4 designed for 32 bits.

![IPv4 Header from wikipedia](http://misc.alexanderdbrown.com/ipv4.png)

Version indicates the version of the IP protocol

Time to live stops network loops.

Header checksum to check the integrity of the header but not the data. Very basic checksum which is used by the router to ensure the packet has not be damaged. 

This does add significant load to the router, not only this, but due to TTL it has to create a new checkum without much gain. There are better checksums to be used and they do not appear in IPv6.

### Loopback Interface

Most TCP implementations have a loopback interface with the IP address `127.0.0.1` (`127.X`) and name localhost (or anything else in `/etc/hosts` which specifies `127.X` as an address).

The localhost behaves as a separate data link interface,

A packet that is sent to the loopback interface moves down the protocol stack and is returned back by the driver software for the localhost "device".

Used for debugging.

Loopback is done in software, never appears on the network.

### The IP Address

Tied to an interface, not an actual machine.

Common to have multiple interfaces (eth0, wlan0, etc.)

Can have multiple addresses on a single interface.

### Classes of Network

5 classes.

* Class A - `0, 7 bits netid, 24 bits hostid` many host.
* Class B - `10, 14 bits netid, 16 bits hostid`
* Class C - `110, 21 bits netid, 8 bits hostid` many network.
* Class D
* Class E - intended for future use

Class Es will never be used because of Microsoft and lack of value.

### Special Addresses

* `X.X.255.255` = Broadcast Address
* `X.X.0.0` = Network
* `255.255.255.255` = Limited broadcast address, used in auto-configuration (e.g. DHCP)

### Network masks

IF you own the address:

`10.0.0.0`

But want to share the address so that:

`10.1.0.0` and `10.2.0.0` are different networks.

`10.0.0.0` is a class A address. therefore is is actually: `10.0.0.0/8`.

So if we change the networks to: `10.1.0.0/16` the network id will be expanded to the first 16 bits.

### Subnets: An example

Take the university address:

`144.124.76.0`

Say we want a network per department, can't use a 24 bit address as that doesn't leave enough addresses.

So they can use a 22 bit network id.

`144.124.76.30/22` or `144.124.76.30/255.255.252.0`

Apply the mask `255.255.252.0` to the IP address to get the host id. Invert for the host address.

Network address is: `144.124.76.0`

But what's the broadcast address?

`144.124.79.255`

*(Look at the bits for this)*

Here, `255.255.252.0` is the subnet mask.

Used to be allowed to have subnet masks like `255.0.255.255` as it doesn't add anything.

### Classless Interdomain Routing (CIDR) - Supernetting

Treat two contiguous class C networks as a single network.

This eases routing (supernets). For example supernet on geographic locations to make routing tables easier at a router level.

Usual class C is /24, we make them a /23 if we have to contiguous networks

This is the answer to the 192 soup.

Non-contiguous versions of this are disallowed. Must choose numbers for which the maths works.

### Private Address Space

There are some special IP addresses

* e.g. loopback

RFC 1918 written when started IP addresses to reserve certain IP addresses:

These can be used for private addressing schemes, but not routable on the internet.

* 10.0.0.0 - 10.255.255.255 (10/8)
* 172.16.0.0 - 172.31.255.255 (172.16/12)
* 192.168.0.0 - 192.168.255.255 (192.168/16)



### Network Address Translation

Router has a pool of public IP addresses, when a private IP address attempts to access an external resource. The router maps the private IP address to a public IP address which accesses the resource and returns. The public IP address is then translated back to the private IP address and routed.

In industry the pool may be a class C network. In home networks there is only a pool of one. They also do port address translation.

## Naming and Directory Services

*Including the DNS and LDAP and their use.*

## Quality of Service

*The need for and the provision of Quality of Service (QoS) within packet based networks such as the Internet which are inherently best efforts at heart.*

## Security Issues

*The inherent risks within networks such as the Internet, cracking, viruses, trojans, worms and denial of service attacks. The role of the Firewall and the problems it can bring.*

## Current and Future Issues

*The (still) emerging IPv6 protocol and other active issues.*

### Internet Protocol Version 6 (IPv6)

Problems with IPv4 is that 32 bit addresses is too small.

* 128 bit address space solves the problem for the long term.
* Large space allows addresses to be more structured.

### An IPv6 Address

`fe80::2c0:dfff:fee4:bd87/10`

Loopback address: `::1/128`

`::` is a string of `0`s of indeterminate length.

IPv4 addresses are encapsulated in IPv6 are expressed with dotted decimal for last four octlets: ``::194.123.1.2`

IPv6 addresses are leased (possibly infinitely).

#### Current Allocation

* `0000 0000` - Reserved
* `0000 001 ` - NSAP Allocation 
* `001       ` - Aggregatable Global Unicast
* `1111 1110 10` - Link-Local Unicast
* `1111 1110 11` - Site-Local Unicast
*  `1111 1111` -  Multicast

### Link-Local Addresses

Format Prefix: `1111 1110 10` or `FE80::/64`

Postfix is usually the last 24 bits of MAC address. middle byte is `fffe` due to IEEE standards.

`fe80::00ff:fe00:0000` for MAC address: `00:00:00:00:00:00`

### Site-Local Addresses

Format Prefix `1111 1110 11` or `FEC0`

# SEM6120 - Introduction to Intelligent Systems

This module introduces the key ideas in Artificial Intelligence and ensures all students are at roughly the same level before moving on to the specialist modules.

## Introduction

*General introduction to Artificial Intelligence (AI), including discussion of what AI is, its history, definitions, and philosophical debates on the issue (the Turing test and the Chinese room). Ethical issues (3 hours).*

### Staff

- **[Richard Jensen](mailto:rkj@aber.ac.uk)**
- [Adrian Shaw](ais@aber.ac.uk)

### Learning Outcomes

1. Describe and use the basic principles of Artificial Intelligence and Machine Learning.
2. Be able to reflect on project needs.
3. Practically apply AI and ML principles to meet those needs.
4. Present the material they have learned in an informed, clear manner.
5. Demonstrate understanding and insight into the material that they are presenting.

### Assessment

- Presentation **20%** *01/10/2013-18/10/2013*
- Report **20%** *01/10/2013-25/10/2013
- Essay **60%** (coding + report) *10/10/2013-01/11/2013*

*Tips: if you disagree with a paper, you should comment on why, this will be a good thing :)*

### Commitment

* 26h seminars
* 6h practicals
* The rest of the time is spent on background reading and assignments.

### Booklist

* **Artificial Intelligence: A Modern Approach** Russell, S. and Norvig, P.
* **Artificial Intelligence: Structures and Strategies for Complex Problem Solving.** - Luger G.
* **Artificial Intelligence Illuminated** - Coppin B.

### What is Artificial Intelligence?

* Understand intelligent entities; learning more about ourselves?
* Building intelligent entites; creating things which exhibit "intelligence".

Two ways of looking at this:

* Scientific goal
* Engineering goal

Many definitions, all potentially valid.

Problem: what is intelligence and how do we prove a system is intelligent.

### Strong versus Weak AI

* Strong AI can actually think intelligently.
* Weak AI can possibly act intelligently.

### Turing Test

Human interrogator talks to another system (human or AI), if the interrogator cannot tell the difference then the argument is we must acknowledge it is able to think like a human.

Has not yet been passed.

### The Chinese Room

Behaving intelligently may not be enough.

Computers are just a symbol manipulation device and therefore cannot have mental states.

### Ethics and AI

We have investigated whether we *can* develop AI, but not whether we *should*.

Problems of AI:

* Job losses
* Too much/little leisure
* Privacy rights
* Accountability
* End of the human race?
  * Harm in the wrong hands

### Branches of AI

* Logical AI
* Search
* Pattern recognition
* Representation
* Inference
* Common-sense knowledge and reasoning
* Learning from experience
* Planning
* Epistemology
* Ontology
* Heuristics
* Genetic Programming


## Search

*Why search is important in AI and how to go about it. This includes both informed and uninformed strategies. Evolutionary search (6 hours)*.

### Defining the Problem

Many AI problems can be framed in terms of a search problem.

Representation is very important.

The search strategy is the way in which searching is performed:

* Uninformed
* Informed (Heuristic)

Can't always evaluate all the search space. Massive search space (e.g. Chess) or even infinite.

### Terminology

#### Search State
Summarises the state of search.

May not lead to a solution.

*e.g. Representation of a chess board.*

#### Initial State
The first search state.

#### Solution
A special example of a search state. It solves the problem.

#### Goal State
The state trying to be reached.

#### State Space
All possible search states.

#### Successor Function
Ways to move around in the state space (action/operators).

#### Goal Function
To check if the goal has been reached.

#### Cost Function
Measures the path cost.

### Search Trees

Visualise the progression of a particular algorithm.

Shouldn't evaluate every possibility of the state space.

Initial state is the root, goal is a leaf.

Don't store the whole search tree. Requires a lot of space. Can discard explored nodes.

Store the frontier of search (i.e. nodes in search tree with some unexplored children).

### Evaluation

#### Time Complexity
In big O notation. Number of nodes generated during a search (worst case).

#### Space complexity
In big O notation. Maximum number of nodes stored in memory.

#### Optimality
Is it guaranteed to find the optimal solution?

#### Completeness
If there is a solution, will it be found?

#### Branching Factor `b`
Maximum number of successors of any node

#### Depth of shallowest goal `d`

#### Maximum length of any path in the state space `m`

### Breadth First Search

Branching factor `b` and depth of solution `d`.

* Time complexity: `O(b^d)`
* Space complexity: `O(b^d)`
* Optimal (given step costs are identical)
* Complete (provided `b` is finite)


### Depth First Search

Branching factor `b`, depth of solution `d` and maximum depth `m`.

* Time complexity: `O(b^m)`
* Space complexity: `O(bm)`
* Not optimal
* Not complete (complete if no loops)

### Depth Limited Search

A Depth First Search with a limited maximum depth.

Depth limit `l`.

* Time Complexity: `O(b^l)`
* Space Complexity: `O(bl)`
* Complete if `l >= d`
* Not optimal

### Uniform Cost Search

A form of Breadth First Search, using a Priority Queue.

Node with the lowest total path cost is expanded.

If all the cost steps are equal, it is exactly the same as BFS.


Complete and Optimal if no negative path costs.

### Iterative Deepening

A depth-limited search where the limit is increased iteratively.

Avoids the space complexity of BFS.

* Time Complexity: `O(b^d)`
* Space Complexity: `O(bd)`
* Optimal
* Complete

### Heuristics

A rule of thumb.

### Iterative Improvement

Paths not retained - low memory

### Hill Climbing

Heuristic best child chosen at each point until goal reached or no change in current state.

No backtracking.

### Best First Search

Priority queue based on heuristic. Like BFS other than that.

### A*

A best first search which takes into account current path cost.

`f(n) = g(n) + h(n)`

### Greedy Best First Search

`f(n) = h(n)`

### Dominance/Informedness

If `h2(n) >= h1(n)` then `h2` dominates `h1`.

## Knowledge Representation

*Ways of representing knowledge in a computer-understandable way. Semantic networks, rules. Examples of the importance of KR (4 hours).*

## Neural Networks and subsymbolic learning

*We can find solutions using search, but how can we remember solutions, learn from them and adapt them to new situations? This will cover perceptrons, single-layer and multi-layer networks (5 hours).*

### Symbolic Learning

When we use some sort of rule-based system, we generally have to understand the rules. This means we understand the conclusions it draws, because it can tell us.

When a system learns from such rules, it processes in a way which can be understood.

### Subsymbolic Learning

Don't really understand, or have control over, the way in which solutions are found.

ANNs, GAs, GP and sometimes statistical methods.

Might be related to the randomness factor.

### Artificial Neural Networks

*(A: time to not understand backprop again)*

Inputs (variables) -> network -> Outputs (results).

X and Y matrices of the statistical models are analogous to the training inputs and outputs of ANNs.

### Backpropagation

Most common learning rule for ANNs.

Connections between nodes given random initial weights.

We therefore get a value at the output node(s) which happens when these random weights are applied to the data at the input.

### Epoch

An iteration, that is, finding the error then adjusting weighting, is called an epoch.

There may be many thousands of epochs in one training.

### Overfitting

Need to be able to *generalise* the model to unseen data.

Too much training will lead to a lack of generalisation.

### Kohonen Neural Networks

Self-organising neural networks.

Random initialisation of a grid, see which nodes best match the input and change nodes around it.

### Genetic Algorithms

Encode solutions in Chromosomes.

Mutate and crossover chromosomes.

Evaluate the new population and select the best.

### Genetic Programming

A branch of genetic algorithms which uses programming statements as genes.

Easy to do in LISP.

Usually represented as trees.

### Koza's Algorithms

* Tree consists of functions and terminals
* Choose a set of functions and terminals
  * e.g.: `{+,-,*,/,sqrt},{A,B}`
* Generate random population which are syntactically correct.
* Follow GA-like procedure.

## Propositional and First-Order Logic

*The backbone of knowledge representation (4 hours).*

### Types of Knowledge

* Declarative - Facts
* Procedural
* Meta - knowledge about knowledge
* Heuristic - rules of thumb

### Representing Knowledge: Object-attribute-value

Encoding a fact in three pieces of information; the object, it's attributes and the values of these attributes.

The facts a human knows are not obvious to a computer; needs to be encoded.

e.g.: `Tree(species, oak)`

The encoding doesn't matter, so long as its uniform to the system.

Can include an uncertainty factors is a number which can be taken into account by the system when making decisions.

The final conclusion of any program where uncertainty was used in the input is likely to also have an uncertainty factor (if you're not sure of the facts, can can the result be certain?)

Encoding uncertainty might be encoded something like this: `Tree(species, oak, 0.8)` (the certainty that the tree is an oak tree is 80%).

Again encoding doesn't matter, so long as its uniform to the system.

### Rules

A knowledge base may have rules associated.

`IF` premises `THEN` conclusion. There may be more than one premises and may contain logical function

* `AND`, `OR` and `NOT` for example

If a premise evaluates to `TRUE` the rule *fires*.

e.g. 

`IF tree(species, oak) THEN tree(type, deciduous)`

Rules may contradict another rule. Different strategies can be applied to choose the most specific or most relevant rules.

### Meta Rules

<pre>
IF
    tree is conifer
THEN
    load conifer data
ELSE
    load deciduous data
</pre>

### Logic

We can represent knowledge using logic. There are two types: *propositional* and *predicate* (or first-order logic or predicate calculus)

### Propositional Logic

In propositional logic formulas are constructed using variables, `TRUE` and `FALSE` constants and connectors:

* `AND` (`∧`)
* `OR` (`∨`)
* `NOT` (`¬`)
* `IMPLIES` (`→`)

### Predicate Logic

Prolog is based on this.

A predicate is like a function that returns `TRUE` or `FALSE`

`Tree(a)` is true if `a` is oak, false if `a` is daffodil.

### Implication

`Oak(a) → Tree(a)`

If the first clause is satisfied, the second clause is also satisfied.

### Assertions

The symbol `∀` can be read as "for all".

`∀a(Oak(a) → Tree(a)`

### Existence

The symbol `∃` can be read as "exists"

`∃a(Beech(a) ∧ ¬Green(a))`

### The Atomic Formula

`beech(a)` is known as an atomic formula.

Can have multiple parameters.

### Human Reasoning

We use two standard rules:

* Deductive
  1. Modus Ponens - if we know `P→Q` then if `P` is true, `Q` must also be true
  2. Modus Tollens - if we know `P→Q` then if `Q` is false, `P` must also be false
* Inductive
  * Difficult for machines
  * Observations:
    * Oak trees have green leaves
    * Pine trees have green leaves
  * Induce
    * All trees have green leaves
  * Unfortunately, that's not true, but it is useful.

### Non-monotonic

Classic monotonic reasoning cannot contain contradictions

Put formally:

`X ⊆ Y → Deriv(X) ⊆ Deriv(Y)` where `Deriv(X)` is a set of facts derived from `X`

### Temporal Reasoning

Reasoning changes over time. Can introduce this into machines by introducing a concept of time.

### Machine Inference

Machine inference is used to deduce new facts from a knowledge base which is held in working memory.

`Knowledge Base -> Inference Engine -> Working memory`

Can be very complex

### Deducing New Facts

Two principal methods

1. Forwards chaining - based on modus ponens.
2. Backwards chaining - based on modus tollens.

### Forward Chaining

Modens Ponens:

`student(S) ∧ studies(S, ai) → studies(S, prolog)`
`student(T) ∧ studies(S, expsys) → studies(T, ai)`
`student(joe)`
`studies(joe, expsys)`

Therefore we can deduce:

`studies(joe, prolog)`

Proof:

`student(joe) ∧ studies(joe, expsys) → studies(joe, ai)`
`student(joe) ∧ studies(joe, ai) → studies(joe, prolog)`

Q.E.D.

Forwards chaining can fire any rules which match the knowledge held in its working memory. This can potentially come up with a huge amount of new knowledge, most of which is probably completely irrelevant.

### Backwards chaining

Backwards chaining sets out to prove a piece of information.

The information will either be true or false, but doesn't generate unwanted results.

Use the *resolution* proof method for now.

Say we have:

`A1 ∨ A2 ∨ ... ∨ An ∨ B` and ` ¬B ∨ C1 ∨ C2 ∨ ... ∨ Cm`

Resolvent of clauses is:

`A1 ∨ .. ∨ An ∨ C1 ∨ ... ∨ Cm`

### Resolution

Now take the two clauses:

`A1 ∨ A2 ∨ ... ∨ An ∨ B` and `D ∨ C1 ∨ C2 ∨ ... ∨ Cm`

If there is some subset where `B` and `D` are negations of each other `Theta`

If we have two clauses `Clause1` and `Clause2`, and these both have a resolvant `R`, then if `Clause1` and `Clause2` are both satisfiable, so must `R` be.

The idea: take a clause, containing a goal we want to prove, and negate that goal. If we then resole this with other clauses, over and over and we get to the empty clause (which is never satisfiable), we have proved our goal.

### Clause form

We can express any predicate calculus statement in clause form.

This enables us to work with OR and NOT rather than any other clause.

`p → q ≡ ¬p ∨ q`

`A ∧ B ≡ ¬(¬A ∨ ¬B)`

### Example of Resolution

Use a previous example in clause form:

1. `¬student(S) ∨ ¬studies(S, ai) ∨ studies(S, prolog)`
2. `¬student(T) ∨ ¬studies(T, expsys) ∨ studies(T, ai)`
3. `student(joe)`
4. `studies(joe, expsys)`

Solution to `studies(S, prolog)` means we must negate it:

`¬studies(S, prolog)`

Resolve the clause 1:

`¬student(S) ∨ ¬studies(S, ai)`

Resolve with clause (2) (`S=T`)

`¬student(S) ∨ ¬studies(S, expsys)`

Resolve with clause (4) (`S = joe`):

`¬student(joe)`

Resolve with clause (3):

`Ø`

Therefore `studies(joe, prolog)` is true.

Q.E.D.

### Horn Clauses

The same thing, but expressed differently. This is how Prolog does it.

A horn clause is a series of disjuncts (ORs)

We can take:

`A ∨ ¬B ∨ ¬C`

and write it:

`A ← B ∧ C`

If `B` and `C` then `A`

All the same thing:

1. `studies(S, prolog) ← student(S) and studies(S, ai)`
2. `studies(T, ai) ← student(T and studies(T, expsys)`
3. `student(joe) ←`
4. `studies(joe, expsys) ←`

### Resolving Horn Clauses

All the negatives are one side of the `←` sign.

`← studies(S, prolog)`
`studies(S, prolog) ← student(S) ∧ studies(S, ai)`

`← student(S) ∧ studies(S, ai)`
`studies(T, ai) ← student(T) ∧ studies(T, expsys)`

`S = T`

`← student(S) ∧ studies(S, expsys)`
`student(joe) ←`

`S = joe`

`← studies(joe, expsys)`
`studies(joe, expsys) ←`

`←`

Q.E.D.

### Prolog Example

[Prolog Tutorial](http://users.aber.ac.uk/ais/Prolog/)

### Prolog

**Pro**gramming with **log**ic.

Uses backwards chaining through horn clauses.

## Programming for Intelligent Systems

*Practical introduction to programming for Intelligent Systems, used to illustrate search, KR and first-order logic (3 hours).*

## Rule-based Systems

*How can human expertise be automated? How to build an expert system - system concepts and architectures. Rule-based systems: design, operation, reasoning, backward and forward chaining (3 hours).*

## Knowledge Acquisition

*Knowledge Acquisition and its importance in KR and RBS (2 hours).*

## Statistical Methods

*Multivariate analysis and statistical methods for solving problems.*

### Multivariate Analysis

Analysis of high-dimensional data. Often not possible to identify or quantify an object from one dimension.

Two methods:

1. Statistical
2. AI methods

### Statistical Models

Always produces the same result from a given set of data.

Will always find the best result within the constraints of their abilities.

### X Values

All the factors which might affect the outcome so that the analysis can find some form of *correlation*.

### Y Values

The set of objects and associated variables.

### Realigning Axes.

Usually statistics are in high-dimensional space. No way of visualising this data.

In a 3D space, can fit a plane to any 3 points to make the problem a 2D one.

Can approximate the plane to more than 3 points and fit the best plane using root mean square error. This is done using regression, but does mean there will be **error** in the model.

Can do this with a 3D plane, but the idea is to keep the model as simple as possible.

### Principal Component Analysis

The line through multi-dimensional space which describes the most variation in the data (the one with the widest space) is the First Principal Component.

The following Principal Components are always perpendicular and are ordered by the amount of variation from the data and have less importance.

Can analyse the principal components to see which of the original X values contributed most.

Principal components help understand the data better.

### Principal Components Regression

The main principal components help to explain what factors had most bearing on the results.

They form a model that could be used for predicting results.

Using a PCA model to predict is known as Principal Components Regression (PRC).

Closely related is PCL.

### Principal of Parsimony

Fewer variables, if they produce a model just as good in testing, should be preferred.